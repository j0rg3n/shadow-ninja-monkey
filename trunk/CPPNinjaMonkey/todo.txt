Jørgen
---
Implement neon+sockets based version of NAT punchthrough and P2P in C++.
1) v Connect to mediator server using a ne_request. Make sure the connection stays open.
2) v On windows (and possibly other platforms), the default implementation of ne_socket will issue a SO_REUSEADDR on the socket before binding, which is exactly what we need.
3) v ne_socket has the "fd" (the socket handle) as its first field, and so can be reinterpret_cast to a SOCKET.
4) v Use getsockname on that to obtain the bound address, and
5) Somehow insert that address into the output...! This is hard, as internally, ne_begin_request
does build_request, send_request, and send_request does open_connection. Hence, when we're building
the request, we don't have the connection that we need to know the bound address.
For now, we have to do a dummy request first - this works because the server is HTTP/1.1, and thus
persists the connection.. Most of the time, anyways.
6) Once P2P connection is obtained, close the request.


Check what's already available in the iPhone SDK for NAT punchthrough and P2P of stuff.


Jørgen: DONE (reverse chronological)
---
Implement prototype in C# for NAT punchthrough and P2P. 

Transmit position accross network.

Add keyboard-controlled thing to app, so that we get some network data to send.

Implement rudimentary windows message-based mouse and keyboard input.
1) Refactor: Trying out pure virtual base class instead of PIMPL (makes platform-agnostic + platform-specific interface simpler, and keeps compile-time and encapsulation advantages, at (theoretically) the same run-time cost.
2) Refactor: Move render code into windows-specific subfolder and added pure virtual base classes. 
3) Implement: Handle WM_*KEY*, WM_*MOUSE* and output as classic input stream: digital keypresses plus axes.

Add -D_SCL_SECURE_NO_WARNINGS to windows settings to suppress yet another useless security warning.

Give precompiled headers another try. (Compile times on the laptop are killing me.)
1) (Digression:) Upgraded signals library usage to the thread-safe boost::signals2 variety.
2) OK with just "build" (with a few small compile fixes). Let's try "rebuild"... OK.

Make work with VC2010 Express:
1) Find workaround for VC2010 containing conflicting bind implementation: 
C:\Program Files\Microsoft Visual Studio 10.0\VC\include\xxbind1: 'std::tr1::_Bind<_Result_type,_Ret,_BindN> ...
Only working workaround for now is fully qualifying the boost::bind.
2) Hidden in the flood of compiler errors was also a breakage in boost::property_tree related to a std::pair interface change in VS2010. This has been worked around in boost, and a suitable external (to boost/property_tree_vs2010, not to contaminate boost on other platforms, as the workaround is not yet in a production release of boost) has been added.


Backlog
---
Replace boost::bind and CallQueue with MessageBuffer: 
1) Simple struct with type and length header that's in-place-new'ed into a dynamically growing buffer.
2) Enumerator-style interface for iterating over the messages.
3) Dispatch becomes lock + copy-out-buffer + unlock + iterate over messages outside of the MessageBuffer, i.e. at the site calling Dispatch. 
Currently this will work for us, as we always know fairly well what we're putting into the message buffer.
4) Reserve ranges of IDs globally and use as enum type basis for each subsystem (to avoid putting all message IDs in a global header - that sucks).

Start looking at latency issues with network synchronization.

Find out whether explicit public inheritance is necessary with structs.

Examine exception handling - we cannot remove exceptions entirely and at the same time use boost, but maybe we can encapsulate exception usage? C++' lack of Java-style "throws Foo" makes it easy to forget handling exceptions thrown.

Consider changing from PIMPL to pure virtual base class; less housekeeping, same compile-time and run-time profile.
(See http://stackoverflow.com/questions/825018/pimpl-idiom-vs-pure-virtual-class-interface for a discussion.)

Find solution to cost of virtual function calls. Virtual function calls are unacceptable on simpler (in-order) platforms (causes cache misses, branch mispredictions and more), and so we must find an easy switch to drop the pure virtual base class and just use the implementation directly on the platforms that require this additional speed. This will probably require keeping method bodies out of the *Impl class body. Or maybe it is enough that the platform-specific Impl type is used everywhere where methods are invoked (with LTCG this should be enough for the compiler/linker to optimize out the vtable access - but this will require browsing some disassembled optimized code to clarify).

Work on design of input binding, i.e. binding relative input axes (controllers), absolute input positions (mouse, touch screen), button presses to game action basis.

Work on design of "gesture input": Prod to screen gives ordinary waypoint (or replaces the existing waypoint), to which ninja will run. Drag indicates attack (ninja will run for the starting point of the drag, then run along the drag until max attack length is reached).

Try to implement DXInput (multiple) mouse input. (Needed for testing network on single machine.) 
