Jørgen
---
Implement rudimentary windows message-based mouse and keyboard input.
1) Trying out pure virtual base class instead of PIMPL (makes platform-agnostic + platform-specific interface simpler, and keeps compile-time and encapsulation advantages, at (theoretically) the same run-time cost.


Jørgen: DONE (reverse chronological)
---
Give precompiled headers another try. (Compile times on the laptop are killing me.)
1) (Digression:) Upgraded signals library usage to the thread-safe boost::signals2 variety.
2) OK with just "build" (with a few small compile fixes). Let's try "rebuild"... OK.

Make work with VC2010 Express:
1) Find workaround for VC2010 containing conflicting bind implementation: 
C:\Program Files\Microsoft Visual Studio 10.0\VC\include\xxbind1: 'std::tr1::_Bind<_Result_type,_Ret,_BindN> ...
Only working workaround for now is fully qualifying the boost::bind.
2) Hidden in the flood of compiler errors was also a breakage in boost::property_tree related to a std::pair interface change in VS2010. This has been worked around in boost, and a suitable external (to boost/property_tree_vs2010, not to contaminate boost on other platforms, as the workaround is not yet in a production release of boost) has been added.


Backlog
---
Add -D_SCL_SECURE_NO_WARNINGS to windows settings to suppress yet another useless security warning.

Consider changing from PIMPL to pure virtual base class; less housekeeping, same compile-time and run-time profile.
(See http://stackoverflow.com/questions/825018/pimpl-idiom-vs-pure-virtual-class-interface for a discussion.)

Find solution to cost of virtual function calls. Virtual function calls are unacceptable on simpler (in-order) platforms (causes cache misses, branch mispredictions and more), and so we must find an easy switch to drop the pure virtual base class and just use the implementation directly on the platforms that require this additional speed. This will probably require keeping method bodies out of the *Impl class body.

Work on design of input binding, i.e. binding relative input axes (controllers), absolute input positions (mouse, touch screen), button presses to game action basis.

Work on design of "gesture input": Prod to screen gives ordinary waypoint (or replaces the existing waypoint), to which ninja will run. Drag indicates attack (ninja will run for the starting point of the drag, then run along the drag until max attack length is reached).

Try to implement DXInput (multiple) mouse input. (Needed for testing network on single machine.) 
